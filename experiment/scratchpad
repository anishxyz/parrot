Error parsing request body /v4/training-datasets 'application/json'
{'test-case', 'upload', 'evaluation-config', 'fine-tuned-model', 'generation-job', 'question', 'model-template', 'studio-project', 'question-set', 'thread', 'model-instance', 'evaluation', 'training-dataset', 'validation-dataset', 'application-variant', 'base-model', 'knowledge-base-datum-source', 'autogenerated-draft-test-case', 'model-group', 'evaluation-dataset', 'annotated-by-user', 'knowledge-base', 'application-spec', 'theme', 'model-deployment'}
{'test-case', 'fine-tuning-job', 'deployment', 'generation-job', 'question', 'message', 'content', 'model-template', 'model', 'studio-project', 'thread', 'event', 'evaluation', 'training-dataset', 'chunk', 'async-job', 'evaluation-dataset-version', 'application-variant', 'knowledge-base-datum-source', 'usage-statistic', 'autogenerated-draft-test-case', 'evaluation-dataset', 'knowledge-base', 'application-spec', 'theme', 'model-deployment', 'artifact', 'application-deployment', 'upload', 'evaluation-config', 'evaluation-metric', 'upload-schedule', 'application-variant-report', 'interaction', 'application-schema', 'question-set', 'application-test-case-output', 'contributor-metric', 'test-case-result', 'model-group', 'span', 'hybrid-eval-metric', 'user-info'}
{'account', 'question', 'model', 'studio-project', 'application', 'training-dataset-v3-beta', 'evaluation', 'chunk', 'knowledge-base-datum-source', 'evaluation-dataset', 'chat-completion', 'knowledge-base', 'application-spec', 'evaluation-config', 'completion', 'fine-tuning-job-v3-beta', 'question-set', 'chat-theme', 'model-template-v3-beta', 'agent'}
removing query
removing delete
removing cancel
removing verify
removing rank
removing synthesis
removing execute
removing embedding
removing reranking
removing claim-task
removing batch
removing approve
removing publish
removing approve-batch
removing proces
removing validate
knowledge-base Node('/knowledge-base', graph_node=GraphNode(asset_name='knowledge-base', dependent_assets=[], inputs=['embedding_config', 'knowledge_base_name', 'account_id', 'metadata'], route='/v4/knowledge-bases', method='post', tag='Knowledge Bases'))
upload Node('/upload', graph_node=GraphNode(asset_name='upload', dependent_assets=['knowledge-base'], inputs=['knowledge_base_id'], route='/v4/knowledge-bases/{knowledge_base_id}/uploads', method='post', tag='Knowledge Bases'))
completion Node('/completion', graph_node=GraphNode(asset_name='completion', dependent_assets=['model-deployment'], inputs=['max_tokens', 'top_p', 'model_request_parameters', 'top_k', 'presence_penalty', 'prompt', 'stop_sequences', 'temperature', 'model_deployment_id', 'frequency_penalty'], route='/v4/models/{model_deployment_id}/completions', method='post', tag='Models'))
chat-completion Node('/chat-completion', graph_node=GraphNode(asset_name='chat-completion', dependent_assets=['model-deployment'], inputs=['max_tokens', 'top_p', 'model_request_parameters', 'top_k', 'presence_penalty', 'prompt', 'stop_sequences', 'temperature', 'chat_history', 'model_deployment_id', 'frequency_penalty'], route='/v4/models/{model_deployment_id}/chat-completions', method='post', tag='Models'))
deployment Node('/deployment', graph_node=GraphNode(asset_name='deployment', dependent_assets=['model-instance'], inputs=['model_instance_id', 'deployment_metadata', 'model_creation_parameters', 'name', 'vendor_configuration', 'account_id'], route='/v4/models/{model_instance_id}/deployments', method='post', tag='Models'))
account Node('/account', graph_node=GraphNode(asset_name='account', dependent_assets=[], inputs=['account_name'], route='/accounts', method='post', tag='Accounts'))
evaluation-config Node('/evaluation-config', graph_node=GraphNode(asset_name='evaluation-config', dependent_assets=['studio-project', 'question-set'], inputs=['evaluation_type', 'question_set_id', 'studio_project_id', 'x-selected-account-id', 'account_id'], route='/v4/evaluation-configs', method='post', tag='Evaluation Configs'))
evaluation-dataset Node('/evaluation-dataset', graph_node=GraphNode(asset_name='evaluation-dataset', dependent_assets=['knowledge-base'], inputs=['schema_type', 'name', 'knowledge_base_id', 'x-selected-account-id', 'type', 'account_id'], route='/v4/evaluation-datasets', method='post', tag='Evaluation Datasets'))
evaluation-dataset-version Node('/evaluation-dataset-version', graph_node=GraphNode(asset_name='evaluation-dataset-version', dependent_assets=['evaluation-dataset'], inputs=['account_id', 'evaluation_dataset_id', 'x-selected-account-id'], route='/v4/evaluation-datasets/{evaluation_dataset_id}/evaluation-dataset-versions', method='post', tag='Evaluation Datasets'))
test-case Node('/test-case', graph_node=GraphNode(asset_name='test-case', dependent_assets=['evaluation-dataset'], inputs=['test_case_data', 'schema_type', 'x-selected-account-id', 'chat_history', 'test_case_metadata', 'account_id', 'evaluation_dataset_id'], route='/v4/evaluation-datasets/{evaluation_dataset_id}/test-cases', method='post', tag='Evaluation Datasets'))
studio-project Node('/studio-project', graph_node=GraphNode(asset_name='studio-project', dependent_assets=[], inputs=['description', 'name', 'x-selected-account-id', 'account_id', 'studio_api_key'], route='/v4/studio-projects', method='post', tag='Studio Projects'))
application-spec Node('/application-spec', graph_node=GraphNode(asset_name='application-spec', dependent_assets=['theme'], inputs=['run_online_evaluation', 'theme_id', 'description', 'name', 'x-selected-account-id', 'account_id'], route='/v4/application-specs', method='post', tag='Application Specs'))
evaluation Node('/evaluation', graph_node=GraphNode(asset_name='evaluation', dependent_assets=['application-spec', 'evaluation-dataset', 'evaluation-config', 'application-variant'], inputs=['evaluation_config', 'tags', 'description', 'name', 'evaluation_dataset_version', 'application_variant_id', 'x-selected-account-id', 'type', 'application_spec_id', 'account_id', 'evaluation_dataset_id', 'evaluation_config_id'], route='/v4/evaluations', method='post', tag='Evaluations'))
test-case-result Node('/test-case-result', graph_node=GraphNode(asset_name='test-case-result', dependent_assets=['application-spec', 'test-case', 'annotated-by-user', 'evaluation'], inputs=['test_case_id', 'annotated_by_user_id', 'account_id', 'x-selected-account-id', 'time_spent_labeling_s', 'audit_required', 'test_case_evaluation_data_schema', 'evaluation_dataset_version_num', 'audit_status', 'evaluation_id', 'audit_comment', 'application_spec_id', 'result', 'test_case_evaluation_data'], route='/v4/evaluations/{evaluation_id}/test-case-results', method='post', tag='Evaluations'))
question Node('/question', graph_node=GraphNode(asset_name='question', dependent_assets=[], inputs=['required', 'prompt', 'choices', 'multi', 'dropdown', 'conditions', 'x-selected-account-id', 'type', 'title', 'account_id'], route='/v4/questions', method='post', tag='Questions'))
question-set Node('/question-set', graph_node=GraphNode(asset_name='question-set', dependent_assets=['question'], inputs=['name', 'question_ids', 'account_id', 'x-selected-account-id'], route='/v4/question-sets', method='post', tag='Question Sets'))
knowledge-base-datum-source Node('/knowledge-base-datum-source', graph_node=GraphNode(asset_name='knowledge-base-datum-source', dependent_assets=[], inputs=['description', 'name', 'x-selected-account-id', 'data_source_config', 'data_source_auth_config', 'account_id'], route='/v4/knowledge-base-data-sources', method='post', tag='Knowledge Base Data Sources'))
upload-schedule Node('/upload-schedule', graph_node=GraphNode(asset_name='upload-schedule', dependent_assets=['knowledge-base-datum-source', 'knowledge-base'], inputs=['next_run_at', 'x-selected-account-id', 'chunking_strategy_config', 'interval', 'knowledge_base_id', 'knowledge_base_data_source_id', 'account_id'], route='/v4/knowledge-bases/{knowledge_base_id}/upload-schedules', method='post', tag='Knowledge Bases'))
autogenerated-draft-test-case Node('/autogenerated-draft-test-case', graph_node=GraphNode(asset_name='autogenerated-draft-test-case', dependent_assets=['evaluation-dataset'], inputs=['test_case_data', 'approved', 'topic_str', 'schema_type', 'x-selected-account-id', 'account_id', 'evaluation_dataset_id'], route='/v4/evaluation-datasets/{evaluation_dataset_id}/autogenerated-draft-test-cases', method='post', tag='Evaluation Datasets'))
generation-job Node('/generation-job', graph_node=GraphNode(asset_name='generation-job', dependent_assets=['evaluation-dataset'], inputs=['num_test_cases', 'evaluation_dataset_id', 'x-selected-account-id'], route='/v4/evaluation-datasets/{evaluation_dataset_id}/generation-jobs', method='post', tag='Evaluation Datasets'))
model Node('/model', graph_node=GraphNode(asset_name='model', dependent_assets=['model-template', 'model-group', 'base-model'], inputs=['model_type', 'training_data_card', 'account_id', 'x-selected-account-id', 'base_model_id', 'model_creation_parameters', 'name', 'model_vendor', 'description', 'model_template_id', 'model_group_id', 'model_card', 'base_model_metadata'], route='/v4/models', method='post', tag='Models'))
model-group Node('/model-group', graph_node=GraphNode(asset_name='model-group', dependent_assets=[], inputs=['description', 'name', 'account_id', 'x-selected-account-id'], route='/v4/model-groups', method='post', tag='Models'))
model-template Node('/model-template', graph_node=GraphNode(asset_name='model-template', dependent_assets=[], inputs=['model_request_parameters_schema', 'model_type', 'model_creation_parameters_schema', 'name', 'endpoint_type', 'vendor_configuration', 'x-selected-account-id', 'account_id'], route='/v4/model-templates', method='post', tag='Model Templates V3 (Beta)'))
fine-tuning-job Node('/fine-tuning-job', graph_node=GraphNode(asset_name='fine-tuning-job', dependent_assets=['fine-tuned-model', 'validation-dataset', 'base-model', 'training-dataset'], inputs=['base_model_id', 'fine_tuned_model_id', 'validation_dataset_id', 'vendor_configuration', 'x-selected-account-id', 'account_id', 'training_dataset_id'], route='/v4/fine-tuning-jobs', method='post', tag='Fine Tuning Jobs V3 (Beta)'))
training-dataset Node('/training-dataset', graph_node=GraphNode(asset_name='training-dataset', dependent_assets=[], inputs=[], route='/v4/training-datasets', method='post', tag='Training Datasets V3 (Beta)'))
application-variant Node('/application-variant', graph_node=GraphNode(asset_name='application-variant', dependent_assets=['application-spec'], inputs=['version', 'configuration', 'description', 'name', 'x-selected-account-id', 'application_spec_id', 'account_id'], route='/v4/application-variants', method='post', tag='Applications'))
application-deployment Node('/application-deployment', graph_node=GraphNode(asset_name='application-deployment', dependent_assets=['application-variant'], inputs=['is_active', 'name', 'application_variant_id', 'x-selected-account-id', 'endpoint', 'account_id'], route='/v4/application-deployments', method='post', tag='Applications'))
application-variant-report Node('/application-variant-report', graph_node=GraphNode(asset_name='application-variant-report', dependent_assets=['evaluation-dataset', 'application-variant'], inputs=['evaluation_dataset_ids', 'account_id', 'application_variant_id', 'x-selected-account-id'], route='/v4/application-variant-reports', method='post', tag='Applications'))
thread Node('/thread', graph_node=GraphNode(asset_name='thread', dependent_assets=['application-variant'], inputs=['title', 'account_id', 'application_variant_id'], route='/v4/applications/{application_variant_id}/threads', method='post', tag='Applications'))
theme Node('/theme', graph_node=GraphNode(asset_name='theme', dependent_assets=[], inputs=['logo_blob', 'x-selected-account-id', 'title', 'account_id', 'theme_vars'], route='/v4/themes', method='post', tag='Chat Themes'))
--------------------------------------------------
knowledge-base
children: []
--------------------------------------------------
upload
children: ['knowledge-base']
creating model-deployment
--------------------------------------------------
completion
children: ['model-deployment']
--------------------------------------------------
chat-completion
children: ['model-deployment']
creating model-instance
--------------------------------------------------
deployment
children: ['model-instance']
--------------------------------------------------
account
children: []
--------------------------------------------------
evaluation-config
children: ['studio-project', 'question-set']
--------------------------------------------------
evaluation-dataset
children: ['knowledge-base']
--------------------------------------------------
evaluation-dataset-version
children: ['evaluation-dataset']
--------------------------------------------------
test-case
children: ['evaluation-dataset']
--------------------------------------------------
studio-project
children: []
--------------------------------------------------
application-spec
children: ['theme']
--------------------------------------------------
evaluation
children: ['application-spec', 'evaluation-dataset', 'evaluation-config', 'application-variant']
creating annotated-by-user
--------------------------------------------------
test-case-result
children: ['application-spec', 'test-case', 'annotated-by-user', 'evaluation']
--------------------------------------------------
question
children: []
--------------------------------------------------
question-set
children: ['question']
--------------------------------------------------
knowledge-base-datum-source
children: []
--------------------------------------------------
upload-schedule
children: ['knowledge-base-datum-source', 'knowledge-base']
--------------------------------------------------
autogenerated-draft-test-case
children: ['evaluation-dataset']
--------------------------------------------------
generation-job
children: ['evaluation-dataset']
creating base-model
--------------------------------------------------
model
children: ['model-template', 'model-group', 'base-model']
--------------------------------------------------
model-group
children: []
--------------------------------------------------
model-template
children: []
creating fine-tuned-model
creating validation-dataset
--------------------------------------------------
fine-tuning-job
children: ['fine-tuned-model', 'validation-dataset', 'base-model', 'training-dataset']
--------------------------------------------------
training-dataset
children: []
--------------------------------------------------
application-variant
children: ['application-spec']
--------------------------------------------------
application-deployment
children: ['application-variant']
--------------------------------------------------
application-variant-report
children: ['evaluation-dataset', 'application-variant']
--------------------------------------------------
thread
children: ['application-variant']
--------------------------------------------------
theme
children: []
upload
completion
chat-completion
deployment
account
evaluation-dataset-version
test-case-result
upload-schedule
autogenerated-draft-test-case
generation-job
model
fine-tuning-job
application-deployment
application-variant-report
thread
